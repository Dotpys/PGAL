@page "/voronoi/fortune"
@using System.Globalization
@using System.Numerics
@using System.Text
@using WebShowcase.Component

<PageTitle>Voronoi Diagram</PageTitle>

<h1>Voronoi Diagram</h1>

<main>
	<Section Title="Configuration">
		<h3>Voronoi Diagram</h3>

		<form>
			<label for="seed">Seed</label>
			<input type="number" id="seed" @bind="Seed" />
		</form>

		<form>
			<label for="input_site_count">Site Count</label>
			<input type="number" id="input_site_count" @bind="SiteCount" />
		</form>

		<button type="button" onclick="@(() => @GenerateSites())">Generate</button>
	</Section>

	<Section Title="Result">
		<svg viewBox="0 0 100 100">
			<!--Sites-->
			@foreach (var site in sites)
			{
				<circle class="site"
					cx="@site.X.ToString(CultureInfo.InvariantCulture)"
					cy="@site.Y.ToString(CultureInfo.InvariantCulture)"
					r="1.5" />
			}

			<!--Sweep Line-->
			<line class="sweep-line"
				x1="0"
				x2="@MAX_SIZE"
				y1="@SweepProgress"
				y2="@SweepProgress"/>

			@foreach(var site in sites.Where(s => s.Y < SweepProgress))
			{
				<path class="parabola" d="@GenerateParabolaPathData(new(site, SweepProgress))"/>
			}

			<!--BeachLine-->
			<path class="beach-line" d="@GenerateBeachLinePathData()"/>
		</svg>

		<hr/>

		<h3>Controls</h3>

		<form>
			<label for="customRange1">Sweep progress: @(SweepProgress)%</label>
			<input type="range" id="customRange1" min="0" max="@MAX_SIZE" @bind="SweepProgress" @bind:event="oninput" />
		</form>
	</Section>
</main>

@code {
	private const float MAX_SIZE = 100f;
	private const int DEFAULT_SITE_COUNT = 5;

	public int Seed { get; set; } = 422;
	public int SiteCount { get; set; } = DEFAULT_SITE_COUNT;
	public int SweepProgress { get; set; } = 75;

	private Vector2[] sites = new Vector2[DEFAULT_SITE_COUNT];
	private PriorityQueue<VoronoiEvent, float> eventQueue = new();
	private List<Vector2> beachLine = new();

	protected override void OnInitialized()
	{
		GenerateSites();
	}

	private void GenerateSites()
	{
		sites = new Vector2[SiteCount];
		Random r = new Random(Seed);
		foreach (int i in Enumerable.Range(0, SiteCount))
		{
			float x = r.NextSingle() * MAX_SIZE;
			float y = r.NextSingle() * MAX_SIZE;
			sites[i] = new(x, y);
			eventQueue.Enqueue(new VoronoiSiteEvent(), y);
		}
		StateHasChanged();
	}

	private string GenerateBeachLinePathData()
	{
		// Per ogni sito...
		var parabolas = sites
		// ...sopra la sweep line...
		.Where(site => site.Y < SweepProgress)
		// ...genero una parabola.
		.Select(site => new Parabola(site, SweepProgress));

		// Per ogni valore da 0..100
		var plot = Enumerable.Range(0, (int)MAX_SIZE + 1)
		.Select(x => (
			x: (float)x,
			// Calcola il la parabola con valore massimo
			y: parabolas
				.Select(p => p.Y(x))
				.DefaultIfEmpty(0)
				.Max()
		)).ToArray();

		StringBuilder sb = new();
		sb.AppendFormat(CultureInfo.InvariantCulture, "M0,{0}", plot[0].Item2);
		foreach(var plotpoint in plot.Skip(1))
		{
			sb.AppendFormat(CultureInfo.InvariantCulture, "L{0},{1}", plotpoint.x, plotpoint.y);
		}
		return sb.ToString();
	}

	private string GenerateParabolaPathData(Parabola p)
	{
		var (a, b, c) = (p.A, p.B, p.C);
		float delta = MathF.Sqrt(b * b - 4 * a * c);
		float x1 = (-b - delta) / (2 * a);
		(float x2, float y2) = (-b / (2 * a), 2 * p.Y(-b / (2 * a)));
		float x3 = (-b + delta) / (2 * a);

		StringBuilder sb = new();
		sb.AppendFormat(CultureInfo.InvariantCulture, "M {0},0", x1);
		sb.AppendFormat(CultureInfo.InvariantCulture, "Q {0},{1},{2},{3}", x2, y2, x3, 0);

		return sb.ToString();
	}

	struct Parabola
	{
		public float A { get; init; }
		public float B { get; init; }
		public float C { get; init; }

		public Parabola(float a, float b, float c)
		{
			A = a;
			B = b;
			C = c;
		}

		public Parabola(Vector2 focus, float directrix)
		{
			A = 1 / (2 * (focus.Y - directrix));
			B = - 2 * focus.X * A;
			C = (focus.X * focus.X + focus.Y * focus.Y - directrix * directrix) * A;
		}

		public float Y(float x) => A * x * x + B * x + C;
	}

	abstract class VoronoiEvent { }

	sealed class VoronoiSiteEvent() : VoronoiEvent { }

	sealed class VoronoiVertexEvent() : VoronoiEvent { }

	private void GenerateDiagram(Vector2[] sites)
	{
		//PriorityQueue<VoronoiEvent, float> eventQueue = new();
		//List<int> beachLine = new();
		//
		//// Fill event queue with Site Events
		//for(int i=0; i<sites.Length; i++)
		//{
		//	//eventQueue.Enqueue(new VoronoiSiteEvent(i), sites[i].Y);
		//}
		//
		//while (eventQueue.TryDequeue(out VoronoiEvent e, out float y))
		//{
		//	// TODO: Deleted Events?
		//	if (e is VoronoiSiteEvent)
		//	{
		//		var siteEvent = (VoronoiSiteEvent)e;
		//		// Insert Parabola
		//		// if root != null; root = new parabola(e.site)
		//		// if root.isLeaf() && root.site.y - p.y < 1)
		//		{
		//		}
		//	}
		//	else
		//	{
		//		// Remove Parabola
		//	}
		//}
	}

	struct Circle
	{
		public Vector2 Center { get; init; }
		public float Radius { get; init; }
	}

	private bool TryGetCircleByPoints(Vector2 p1, Vector2 p2, Vector2 p3, out Circle circle)
	{
		// Eliminazione gaussiana.
		float[] m =
		[
			2*p1.X, 2*p1.Y, 1, -(p1.X * p1.X + p1.Y * p1.Y),
			2*p2.X, 2*p2.Y, 1, -(p2.X * p2.X + p2.Y * p2.Y),
			2*p3.X, 2*p3.Y, 1, -(p3.X * p3.X + p3.Y * p3.Y),
		];
		float n = 0;
		// Portiamo in forma triangolare
		// L2 -> L2 - L1 * (L2_0/L1_0)
		n = m[4] / m[0];
		for (int i = 0; i<4; i++) m[4 + i] -= m[0 + i] * n;

		// L3 -> L3 - L1 * (L3_0/L1_0)
		n = m[8] / m[0];
		for (int i = 0; i<4; i++) m[8 + i] -= m[0 + i] * n;

		// L3 -> L3 - L2 * (L3_1/L2_1)
		n = m[9] / m[5];
		for (int i = 0; i<4; i++) m[8 + i] -= m[4 + i] * n;
		// Ci fermiamo alla eliminazione di Gauss invece di proseguire con la eliminazione di Gauss-Jordan
		var c = m[11] / m[10];
		var b = (m[7] - m[6] * c) / m[5];
		var a = (m[3] - m[1] * b - m[2] * c) / m[0];

		// TODO: Check for edge cases (colinear points)

		circle = new Circle()
			{
				Center = new Vector2(-a, -b),
				Radius = MathF.Sqrt(-a * -a + -b * -b - c)
			};
		return true;
	}
}
