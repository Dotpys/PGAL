using System.Diagnostics;
using System.Numerics;
using System.Runtime.InteropServices.JavaScript;
using System.Runtime.Versioning;

namespace WebShowcase.Pages;

[SupportedOSPlatform("browser")]
public partial class PerlinNoise3D
{
	[JSImport("startRenderer", "PerlinNoise3D")]
	internal static partial Task StartRenderer();

	[JSImport("loadVertexBuffer", "PerlinNoise3D")]
	internal static partial void LoadVertexBuffer(byte[] data);

	[JSImport("loadFrame", "PerlinNoise3D")]
	internal static partial string LoadFrame(byte[] data);
}

public class MarchingCubes
{

	public static byte[] GenerateMesh(float[,,] lattice, int latticeSize, float threshold)
	{
		// Max 4 triangles, 3 vertices each, position(3 * 4) + normal(3*4)
		int MAX_VOXEL_SIZE = 4 * 3 * (12 + 12);
		int LATTICE_SIZE = latticeSize * latticeSize * latticeSize;
		float voxelSize = 2.0f / latticeSize;
		BinaryWriter data = new(new MemoryStream(LATTICE_SIZE * MAX_VOXEL_SIZE));

		for (int z = 0; z < latticeSize; z++)
		for (int y = 0; y < latticeSize; y++)
		for (int x = 0; x < latticeSize; x++)
		{
			byte index = 0;
			if (lattice[x + 0, y + 0, z + 0] > threshold) index |= 0b00000001;
			if (lattice[x + 1, y + 0, z + 0] > threshold) index |= 0b00000010;
			if (lattice[x + 0, y + 1, z + 0] > threshold) index |= 0b00000100;
			if (lattice[x + 1, y + 1, z + 0] > threshold) index |= 0b00001000;
			if (lattice[x + 0, y + 0, z + 1] > threshold) index |= 0b00010000;
			if (lattice[x + 1, y + 0, z + 1] > threshold) index |= 0b00100000;
			if (lattice[x + 0, y + 1, z + 1] > threshold) index |= 0b01000000;
			if (lattice[x + 1, y + 1, z + 1] > threshold) index |= 0b10000000;

			if (index is 0 or 255) continue;

			Vector3[] vertices = [
				/* 0*/new(0.5f, 0, 0),
				/* 1*/new(1, 0.5f, 0),
				/* 2*/new(0.5f, 1, 0),
				/* 3*/new(0, 0.5f, 0),
				/* 4*/new(0.5f, 0, 1),
				/* 5*/new(1, 0.5f, 1),
				/* 6*/new(0.5f, 1, 1),
				/* 7*/new(0, 0.5f, 1),
				/* 8*/new(0, 0, 0.5f),
				/* 9*/new(1, 0, 0.5f),
				/*10*/new(1, 1, 0.5f),
				/*11*/new(0, 1, 0.5f) 
			];

			Vector3[] normals = [
				/* 0*/new(-1,  0,  0),
				/* 1*/new( 1,  0,  0),
				/* 2*/new( 0, -1,  0),
				/* 3*/new( 0,  1,  0),
				/* 4*/new( 0,  0, -1),
				/* 5*/new( 0,  0,  1),
				/* 6*/new( 0.577f,  0.577f,  0.577f),
				/* 7*/new(-0.577f,  0.577f,  0.577f),
				/* 8*/new( 0.577f, -0.577f,  0.577f),
				/* 9*/new(-0.577f, -0.577f,  0.577f),
				/*10*/new( 0.577f,  0.577f, -0.577f),
				/*11*/new(-0.577f,  0.577f, -0.577f),
				/*12*/new( 0.577f, -0.577f, -0.577f),
				/*13*/new(-0.577f, -0.577f, -0.577f),
				/*14*/new(0,  0.707f,  0.707f),
				/*15*/new(0, -0.707f,  0.707f),
				/*16*/new(0,  0.707f, -0.707f),
				/*17*/new(0, -0.707f, -0.707f),
				/*18*/new( 0.707f, 0,  0.707f),
				/*19*/new(-0.707f, 0,  0.707f),
				/*20*/new( 0.707f, 0, -0.707f),
				/*21*/new(-0.707f, 0, -0.707f),
				/*22*/new( 0.707f,  0.707f, 0),
				/*23*/new(-0.707f,  0.707f, 0),
				/*24*/new( 0.707f, -0.707f, 0),
				/*25*/new(-0.707f, -0.707f, 0)
			];

			int[] newData = index switch
			{
				0 => [],
				1   => [0, 3, 8, 6],
				2   => [9, 1, 0, 7],
				3   => [9, 1, 8, 14, 8, 1, 3, 14],
				4   => [3, 2, 11, 8],
				5   => [0, 2, 8, 18, 8, 2, 11, 18],
				6   => [9, 1, 0, 7, 3, 2, 11, 8],
				7   => [11, 8, 9, 5, 11, 9, 2, 6, 1, 2, 9, 6],
				8   => [1, 10, 2, 9],
				9   => [0, 3, 8, 6, 1, 10, 2, 9],
				10  => [9, 10, 0, 19, 0, 10, 2, 19],
				11  => [8, 9, 10, 5, 8, 10, 3, 7, 3, 10, 2, 7],
				12  => [1, 10, 3, 15, 3, 10, 11, 15],
				13  => [10, 11, 8, 5, 10, 8, 1, 8, 1, 8, 0, 8],
				14  => [9, 10, 11, 5, 9, 11, 0, 9, 0, 11, 3, 9],
				15  => [9, 10, 8, 5, 8, 10, 11, 5],
				16  => [8, 7, 4, 10],
				17  => [0, 3, 4, 22, 4, 3, 7, 22],
				18  => [9, 1, 0, 7, 8, 7, 4, 10],
				19  => [1, 3, 7, 3, 1, 7, 9, 6, 9, 7, 4, 6],
				20  => [3, 2, 11, 8, 8, 7, 4, 10],
				21  => [4, 0, 2, 1, 4, 2, 7, 6, 11, 7, 2, 6],
				22  => [9, 1, 0, 7, 3, 2, 11, 8, 8, 7, 4, 10],
				23  => [2, 11, 1, 6, 1, 11, 9, 6, 9, 11, 7, 6, 9, 7, 4, 6],
				24  => [1, 10, 2, 9, 8, 7, 4, 10],
				25  => [1, 10, 2, 9, 0, 3, 4, 22, 4, 3, 7, 22],
				26  => [9, 10, 0, 19, 0, 10, 2, 19, 8, 7, 4, 10],
				27  => [10, 2, 9, 19, 2, 7, 9, 6, 3, 7, 2, 23, 7, 4, 9, 6],
				28  => [1, 10, 3, 15, 3, 10, 11, 15, 8, 7, 4, 10],
				29  => [1, 10, 0, 8, 10, 7, 0, 8, 10, 11, 7, 14, 7, 4, 0, 22],
				30  => [9, 10, 11, 5, 9, 11, 0, 9, 0, 11, 3, 9, 8, 7, 4, 10],
				31  => [7, 4, 9, 6, 7, 9, 11, 6, 11, 9, 10, 5],
				32  => [4, 5, 9, 11],
				33  => [0, 3, 8, 6, 4, 5, 9, 11],
				34  => [4, 5, 0, 23, 0, 5, 1, 23],
				35  => [5, 1, 3, 3, 5, 3, 4, 7, 4, 3, 8, 7],
				36  => [3, 2, 11, 8, 4, 5, 9, 11],
				37  => [0, 2, 8, 18, 8, 2, 11, 18, 4, 5, 9, 11],
				38  => [3, 2, 11, 8, 4, 5, 0, 23, 0, 5, 1, 23],
				39  => [2, 11, 1, 6, 1, 11, 4, 6, 4, 5, 1, 23, 11, 8, 4, 19],
				40  => [1, 10, 2, 9, 4, 5, 9, 11],
				41  => [0, 3, 8, 6, 1, 10, 2, 9, 4, 5, 9, 11],
				42  => [2, 0, 4, 0, 2, 4, 10, 7, 10, 4, 5, 7],
				43  => [10, 2, 5, 7, 5, 2, 4, 7, 4, 2, 3, 7, 4, 3, 8, 7],
				44  => [1, 10, 3, 15, 3, 10, 11, 15, 4, 5, 9, 11],
				45  => [10, 11, 8, 5, 10, 8, 1, 8, 1, 8, 0, 8, 4, 5, 9, 11],
				46  => [3, 0, 11, 9, 11, 0, 5, 9, 10, 11, 5, 14, 4, 5, 0, 23],
				47  => [4, 5, 10, 7, 4, 10, 8, 7, 8, 10, 11, 5],
				48  => [8, 7, 9, 16, 9, 7, 5, 16],
				49  => [3, 7, 5, 3, 3, 5, 0, 10, 0, 5, 9, 10],
				50  => [7, 5, 1, 3, 7, 1, 8, 11, 8, 1, 0, 11],
				51  => [3, 7, 1, 3, 1, 7, 5, 3],
				52  => [3, 2, 11, 8, 8, 7, 9, 16, 9, 7, 5, 16],
				53  => [5, 9, 0, 10, 5, 0, 11, 10, 0, 2, 11, 18, 5, 11, 7, 14],
				54  => [3, 2, 11, 8, 7, 5, 1, 3, 7, 1, 8, 11, 8, 1, 0, 11],
				55  => [2, 11, 7, 6, 2, 7, 1, 6, 1, 7, 5, 3],
				56  => [1, 10, 2, 9, 8, 7, 9, 16, 9, 7, 5, 16],
				57  => [1, 10, 2, 9, 3, 7, 5, 3, 3, 5, 0, 10, 0, 5, 9, 10],
				58  => [0, 8, 7, 11, 0, 7, 10, 11, 0, 10, 2, 19, 7, 5, 10, 14],
				59  => [10, 2, 3, 7, 10, 3, 5, 7, 5, 3, 7, 3],
				60  => [1, 10, 3, 15, 3, 10, 11, 15, 8, 7, 9, 16, 9, 7, 5, 16],
				61  => [5, 10, 7, 14, 7, 10, 11, 14, 0, 1, 9, 12],
				62  => [5, 10, 7, 14, 7, 10, 11, 14, 8, 3, 0, 13],
				63  => [5, 10, 7, 14, 7, 10, 11, 14],
				64  => [7, 11, 6, 12],
				65  => [0, 3, 8, 6, 7, 11, 6, 12],
				66  => [9, 1, 0, 7, 7, 11, 6, 12],
				67  => [9, 1, 8, 14, 8, 1, 3, 14, 7, 11, 6, 12],
				68  => [3, 2, 7, 24, 7, 2, 6, 24],
				69  => [0, 2, 6, 1, 0, 6, 8, 8, 7, 8, 6, 8],
				70  => [9, 1, 0, 7, 3, 2, 7, 24, 7, 2, 6, 24],
				71  => [-1, -1, -1, -1],// TODO: DIOMERDA
				72  => [1, 10, 2, 9, 7, 11, 6, 12],
				73  => [0, 3, 8, 6, 1, 10, 2, 9, 7, 11, 6, 12],
				74  => [9, 10, 0, 19, 0, 10, 2, 19, 7, 11, 6, 12],
				75  => [8, 9, 10, 5, 8, 10, 3, 7, 3, 10, 2, 7, 7, 11, 6, 12],
				76  => [7, 3, 1, 2, 7, 1, 6, 8, 6, 1, 10, 8],
				77  => [1, 10, 6, 8, 1, 6, 7, 8, 1, 7, 0, 8, 0, 7, 8, 8],
				78  => [0, 3, 9, 10, 3, 6, 9, 10, 7, 6, 3, 23, 6, 10, 9, 21],
				79  => [6, 7, 8, 8, 6, 8, 10, 8, 10, 8, 9, 5],
				80  => [8, 11, 4, 20, 4, 11, 6, 20],
				81  => [6, 4, 0, 1, 6, 0, 11, 10, 3, 11, 0, 10],
				82  => [9, 1, 0, 7, 8, 11, 4, 20, 4, 11, 6, 20],
				83  => [3, 11, 6, 10, 3, 6, 9, 10, 9, 1, 3, 14, 6, 4, 9, 18],
				84  => [2, 6, 4, 1, 2, 4, 3, 12, 3, 4, 8, 12],
				85  => [0, 2, 4, 1, 4, 2, 6, 1],
				86  => [9, 1, 0, 7, 2, 6, 4, 1, 2, 4, 3, 12, 3, 4, 8, 12],
				87  => [2, 6, 4, 1, 2, 4, 1, 6, 1, 4, 9, 6],
				88  => [1, 10, 2, 9, 8, 11, 4, 20, 4, 11, 6, 20],
				89  => [1, 10, 2, 9, 6, 4, 0, 1, 6, 0, 11, 10, 3, 11, 0, 10],
				90  => [9, 10, 0, 19, 0, 10, 2, 19, 8, 11, 4, 20, 4, 11, 6, 20],
				91  => [3, 11, 2, 11, 9, 10, 6, 18, 9, 6, 4, 18],
				92  => [8, 3, 4, 12, 4, 3, 10, 12, 10, 3, 1, 15, 6, 4, 10, 18],
				93  => [6, 4, 0, 1, 6, 0, 10, 8, 10, 0, 1, 8],
				94  => [9, 10, 4, 18, 4, 10, 6, 18, 8, 3, 0, 13],
				95  => [9, 10, 4, 18, 4, 10, 6, 18],
				96  => [4, 5, 9, 11, 7, 11, 6, 12],
				97  => [0, 3, 8, 6, 4, 5, 9, 11, 7, 11, 6, 12],
				98  => [4, 5, 0, 23, 0, 5, 1, 23, 7, 11, 6, 12],
				99  => [5, 1, 3, 3, 5, 3, 4, 7, 4, 3, 8, 7, 7, 11, 6, 12],
				100 => [4, 5, 9, 11, 3, 2, 7, 24, 7, 2, 6, 24],
				101 => [4, 5, 9, 11, 0, 2, 6, 1, 0, 6, 8, 8, 7, 8, 6, 8],
				102 => [4, 5, 0, 23, 0, 5, 1, 23, 3, 2, 7, 24, 7, 2, 6, 24],
				103 => [1, 2, 5, 22, 5, 2, 6, 22, 4, 7, 8, 9],
				104 => [1, 10, 2, 9, 4, 5, 9, 11, 7, 11, 6, 12],
				105 => [0, 3, 8, 6, 1, 10, 2, 9, 4, 5, 9, 11, 7, 11, 6, 12],
				106 => [2, 0, 4, 0, 2, 4, 10, 7, 10, 4, 5, 7, 7, 11, 6, 12],
				107 => [5, 10, 6, 6, 4, 7, 8, 9, 3, 11, 2, 11],
				108 => [4, 5, 9, 11, 7, 3, 1, 2, 7, 1, 6, 8, 6, 1, 10, 8],
				109 => [5, 10, 6, 6, 4, 7, 8, 9, 0, 1, 9, 12],
				110 => [5, 10, 6, 6, 4, 7, 0, 25, 0, 7, 3, 25],
				111 => [5, 10, 6, 6, 4, 7, 8, 9],
				112 => [9, 8, 11, 4, 9, 11, 5, 10, 6, 5, 11, 10],
				113 => [11, 6, 3, 10, 3, 6, 0, 10, 0, 6, 5, 10, 0, 5, 9, 10],
				114 => [0, 8, 1, 11, 1, 8, 6, 11, 8, 11, 6, 20, 1, 6, 5, 22],
				115 => [11, 6, 5, 10, 11, 5, 3, 10, 3, 5, 1, 3],
				116 => [8, 3, 2, 12, 8, 2, 5, 12, 8, 5, 9, 16, 2, 6, 5, 22],
				117 => [0, 2, 6, 1, 0, 6, 9, 10, 9, 6, 5, 10],
				118 => [1, 2, 5, 22, 5, 2, 6, 22, 8, 3, 0, 13],
				119 => [1, 2, 5, 22, 5, 2, 6, 22],
				120 => [1, 10, 2, 9, 9, 8, 11, 4, 9, 11, 5, 10, 6, 5, 11, 10],
				121 => [5, 10, 6, 6, 3, 11, 2, 11, 0, 1, 9, 12],
				122 => [5, 10, 6, 6, 8, 11, 0, 21, 0, 11, 2, 21],
				123 => [5, 10, 6, 6, 3, 11, 2, 11],
				124 => [5, 10, 6, 6, 8, 3, 9, 17, 9, 3, 1, 17],
				125 => [5, 10, 6, 6, 0, 1, 9, 12],
				126 => [5, 10, 6, 6, 8, 3, 0, 13],
				127 => [5, 10, 6, 6],
				128 => [5, 6, 10, 13],
				129 => [0, 3, 8, 6, 5, 6, 10, 13],
				130 => [9, 1, 0, 7, 5, 6, 10, 13],
				131 => [9, 1, 8, 14, 8, 1, 3, 14, 5, 6, 10, 13],
				132 => [3, 2, 11, 8, 5, 6, 10, 13],
				133 => [0, 2, 8, 18, 8, 2, 11, 18, 5, 6, 10, 13],
				134 => [9, 1, 0, 7, 3, 2, 11, 8, 5, 6, 10, 13],
				135 => [11, 8, 9, 5, 11, 9, 2, 6, 1, 2, 9, 6, 5, 6, 10, 13],
				136 => [5, 6, 1, 25, 1, 6, 2, 25],
				137 => [0, 3, 8, 6, 5, 6, 1, 25, 1, 6, 2, 25],
				138 => [6, 2, 0, 0, 6, 0, 5, 9, 5, 0, 9, 9],
				139 => [9, 5, 6, 9, 9, 6, 3, 9, 3, 6, 2, 23, 9, 3, 8, 14],
				140 => [3, 1, 5, 2, 3, 5, 11, 9, 6, 11, 5, 9],
				141 => [8, 0, 1, 8, 8, 1, 6, 8, 11, 8, 6, 19, 6, 1, 5, 25],
				142 => [5, 6, 11, 9, 5, 11, 3, 9, 5, 3, 9, 9, 9, 3, 0, 9],
				143 => [5, 6, 11, 9, 5, 11, 9, 9, 9, 11, 8, 5],
				144 => [8, 7, 4, 10, 5, 6, 10, 13],
				145 => [0, 3, 4, 22, 4, 3, 7, 22, 5, 6, 10, 13],
				146 => [9, 1, 0, 7, 8, 7, 4, 10, 5, 6, 10, 13],
				147 => [1, 3, 7, 3, 1, 7, 9, 6, 9, 7, 4, 6, 5, 6, 10, 13],
				148 => [3, 2, 11, 8, 8, 7, 4, 10, 5, 6, 10, 13],
				149 => [4, 0, 2, 1, 4, 2, 7, 6, 11, 7, 2, 6, 5, 6, 10, 13],
				150 => [9, 1, 0, 7, 3, 2, 11, 8, 8, 7, 4, 10, 5, 6, 10, 13],
				151 => [7, 6, 11, 7, 9, 5, 4, 8, 1, 2, 10, 10],
				152 => [8, 7, 4, 10, 5, 6, 1, 25, 1, 6, 2, 25],
				153 => [7, 6, 3, 23, 3, 6, 2, 23, 0, 1, 4, 24, 4, 1, 5, 24],
				154 => [8, 7, 4, 10, 6, 2, 0, 0, 6, 0, 5, 9, 5, 0, 9, 9],
				155 => [7, 6, 3, 23, 3, 6, 2, 23, 9, 5, 4, 8],
				156 => [8, 7, 4, 10, 3, 1, 5, 2, 3, 5, 11, 9, 6, 11, 5, 9],
				157 => [7, 6, 11, 7, 0, 1, 4, 24, 4, 1, 5, 24],
				158 => [7, 6, 11, 7, 9, 5, 4, 8, 8, 3, 0, 13],
				159 => [7, 6, 11, 7, 9, 5, 4, 8],
				160 => [4, 6, 9, 21, 9, 6, 10, 21],
				161 => [4, 6, 9, 21, 9, 6, 10, 21, 0, 3, 8, 6],
				162 => [0, 4, 6, 0, 0, 6, 1, 11, 1, 6, 10, 11],
				163 => [8, 4, 3, 7, 3, 4, 10, 7, 3, 10, 1, 16, 4, 6, 10, 21],
				164 => [3, 2, 11, 8, 4, 6, 9, 21, 9, 6, 10, 21],
				165 => [0, 2, 8, 18, 8, 2, 11, 18, 4, 6, 9, 21, 9, 6, 10, 21],
				166 => [3, 2, 11, 8, 0, 4, 6, 0, 0, 6, 1, 11, 1, 6, 10, 11],
				167 => [4, 6, 8, 19, 8, 6, 11, 19, 1, 2, 10, 10],
				168 => [4, 6, 2, 0, 4, 2, 9, 13, 9, 2, 1, 13],
				169 => [0, 3, 8, 6, 4, 6, 2, 0, 4, 2, 9, 13, 9, 2, 1, 13],
				170 => [4, 6, 0, 0, 0, 6, 2, 0],
				171 => [4, 6, 2, 0, 4, 2, 3, 7, 4, 3, 8, 7],
				172 => [4, 1, 9, 13, 4, 11, 1, 13, 1, 11, 3, 15, 6, 11, 4, 19],
				173 => [4, 6, 8, 19, 8, 6, 11, 19, 0, 1, 9, 12],
				174 => [4, 6, 0, 0, 0, 6, 11, 9, 0, 11, 3, 9],
				175 => [4, 6, 8, 19, 8, 6, 11, 19],
				176 => [10, 9, 8, 4, 10, 8, 6, 11, 7, 6, 8, 11],
				177 => [0, 3, 9, 10, 3, 6, 9, 10, 3, 7, 6, 23, 6, 10, 9, 21],
				178 => [6, 10, 7, 11, 7, 10, 8, 11, 8, 10, 1, 11, 8, 1, 0, 11],
				179 => [6, 10, 1, 11, 6, 1, 7, 11, 7, 1, 3, 3],
				180 => [3, 2, 11, 8, 10, 9, 8, 4, 10, 8, 6, 11, 7, 6, 8, 11],
				181 => [7, 6, 11, 7, 0, 2, 9, 20, 9, 2, 10, 20],
				182 => [7, 6, 11, 7, 1, 2, 10, 10, 8, 3, 0, 13],
				183 => [7, 6, 11, 7, 1, 2, 10, 10],
				184 => [8, 7, 6, 11, 8, 6, 1, 11, 8, 1, 9, 17, 6, 2, 1, 25],
				185 => [7, 6, 3, 23, 3, 6, 2, 23, 0, 1, 9, 12],
				186 => [6, 2, 0, 0, 7, 6, 8, 11, 8, 6, 0, 11],
				187 => [7, 6, 3, 23, 3, 6, 2, 23],
				188 => [7, 6, 11, 7, 8, 3, 9, 17, 9, 3, 1, 17],
				189 => [7, 6, 11, 7, 0, 1, 9, 12],
				190 => [7, 6, 11, 7, 8, 3, 0, 13],
				191 => [7, 6, 11, 7],
				192 => [7, 11, 5, 17, 5, 11, 10, 17],
				193 => [0, 3, 8, 6, 7, 11, 5, 17, 5, 11, 10, 17],
				194 => [9, 1, 0, 7, 7, 11, 5, 17, 5, 11, 10, 17],
				195 => [9, 1, 8, 14, 8, 1, 3, 14, 7, 11, 5, 17, 5, 11, 10, 17],
				196 => [5, 7, 3, 2, 3, 10, 5, 12, 3, 2, 10, 12],
				197 => [8, 0, 7, 8, 0, 10, 7, 8, 0, 2, 10, 20, 7, 10, 5, 14],
				198 => [9, 1, 0, 7, 5, 7, 3, 2, 3, 10, 5, 12, 3, 2, 10, 12],
				199 => [9, 5, 8, 15, 8, 5, 7, 15, 1, 2, 10, 10],
				200 => [1, 5, 7, 2, 1, 7, 2, 13, 2, 7, 11, 13],
				201 => [0, 3, 8, 6, 1, 5, 7, 2, 1, 7, 2, 13, 2, 7, 11, 13],
				202 => [9, 5, 0, 9, 5, 11, 0, 9, 5, 7, 11, 14, 0, 11, 2, 21],
				203 => [9, 5, 8, 15, 8, 5, 7, 15, 3, 11, 2, 11],
				204 => [7, 3, 5, 2, 5, 3, 1, 2],
				205 => [1, 5, 7, 2, 0, 1, 8, 8, 1, 7, 8, 8],
				206 => [5, 7, 3, 2, 5, 3, 0, 9, 5, 0, 9, 9],
				207 => [9, 5, 8, 15, 8, 5, 7, 15],
				208 => [8, 11, 10, 4, 8, 10, 4, 12, 5, 4, 10, 12],
				209 => [10, 5, 4, 12, 10, 4, 3, 12, 11, 10, 3, 14, 0, 3, 4, 22],
				210 => [9, 1, 0, 7, 8, 11, 10, 4, 8, 10, 4, 12, 5, 4, 10, 12],
				211 => [9, 5, 4, 8, 3, 11, 1, 16, 1, 11, 10, 16],
				212 => [2, 10, 3, 12, 3, 10, 5, 12, 3, 5, 8, 12, 8, 5, 4, 12],
				213 => [0, 2, 4, 1, 2, 5, 4, 12, 2, 10, 5, 12],
				214 => [9, 5, 4, 8, 1, 2, 10, 10, 8, 3, 0, 13],
				215 => [9, 5, 4, 8, 1, 2, 10, 10],
				216 => [8, 5, 4, 12, 8, 2, 5, 12, 11, 2, 8, 21, 5, 2, 1, 25],
				217 => [0, 1, 4, 24, 4, 1, 5, 24, 3, 11, 2, 11],
				218 => [9, 5, 4, 8, 8, 11, 0, 21, 0, 11, 2, 21],
				219 => [9, 5, 4, 8, 3, 11, 2, 11],
				220 => [3, 1, 5, 2, 3, 5, 8, 12, 8, 5, 4, 12],
				221 => [0, 1, 4, 24, 4, 1, 5, 24],
				222 => [9, 5, 4, 8, 8, 3, 0, 13],
				223 => [9, 5, 4, 8],
				224 => [11, 10, 9, 4, 11, 9, 4, 13, 11, 4, 7, 13],
				225 => [0, 3, 8, 6, 11, 10, 9, 4, 11, 9, 4, 13, 11, 4, 7, 13],
				226 => [7, 11, 4, 13, 4, 11, 1, 13, 4, 1, 0, 23, 11, 10, 1, 16],
				227 => [4, 7, 8, 9, 3, 11, 1, 16, 1, 11, 10, 16],
				228 => [3, 2, 10, 12, 3, 10, 4, 12, 10, 9, 4, 21, 7, 3, 4, 25],
				229 => [4, 7, 8, 9, 0, 2, 9, 20, 9, 2, 10, 20],
				230 => [4, 7, 0, 25, 0, 7, 3, 25, 1, 2, 10, 10],
				231 => [4, 7, 8, 9, 1, 2, 10, 10],
				232 => [11, 2, 7, 13, 7, 2, 1, 13, 7, 1, 4, 13, 4, 1, 9, 13],
				233 => [4, 7, 8, 9, 3, 11, 2, 11, 0, 1, 9, 12],
				234 => [2, 0, 4, 0, 2, 4, 11, 13, 11, 4, 7, 13],
				235 => [4, 7, 8, 9, 3, 11, 2, 11],
				236 => [3, 1, 7, 2, 7, 1, 4, 13, 4, 1, 9, 13],
				237 => [4, 7, 8, 9, 0, 1, 9, 12],
				238 => [4, 7, 0, 25, 0, 7, 3, 25],
				239 => [4, 7, 8, 9],
				240 => [8, 11, 9, 4, 9, 11, 10, 4],
				241 => [11, 10, 9, 4, 11, 9, 3, 10, 3, 9, 0, 10],
				242 => [8, 11, 10, 4, 8, 10, 0, 11, 0, 10, 1, 11],
				243 => [3, 11, 1, 16, 1, 11, 10, 16],
				244 => [8, 10, 9, 4, 8, 2, 10, 12, 8, 3, 2, 12],
				245 => [0, 2, 9, 20, 9, 2, 10, 20],
				246 => [1, 2, 10, 10, 8, 3, 0, 13],
				247 => [1, 2, 10, 10],
				248 => [9, 8, 11, 4, 11, 1, 9, 13, 11, 2, 1, 13],
				249 => [3, 11, 2, 11, 0, 1, 9, 12],
				250 => [8, 11, 0, 21, 0, 11, 2, 21],
				251 => [3, 11, 2, 11],
				252 => [8, 3, 9, 17, 9, 3, 1, 17],
				253 => [0, 1, 9, 12],
				254 => [8, 3, 0, 13],
				255 => [],
			};

			Debug.Assert(newData.Length % 4 == 0);

			if (newData[0] == -1) continue;

			foreach (int triangle in Enumerable.Range(0, newData.Length/4))
			{
				// Scale it down, move to its position
				var offset = (voxelSize * new Vector3(x, y, z)) - Vector3.One;
				var v0 = vertices[newData[triangle * 4 + 0]] * voxelSize + offset;
				var v1 = vertices[newData[triangle * 4 + 1]] * voxelSize + offset;
				var v2 = vertices[newData[triangle * 4 + 2]] * voxelSize + offset;
				var n  = normals [newData[triangle * 4 + 3]];
				
				data.Write(v0.X);
				data.Write(v0.Y);
				data.Write(v0.Z);
				data.Write(n.X);
				data.Write(n.Y);
				data.Write(n.Z);
				data.Write(v1.X);
				data.Write(v1.Y);
				data.Write(v1.Z);
				data.Write(n.X);
				data.Write(n.Y);
				data.Write(n.Z);
				data.Write(v2.X);
				data.Write(v2.Y);
				data.Write(v2.Z);
				data.Write(n.X);
				data.Write(n.Y);
				data.Write(n.Z);
			}
		}
		
		return ((MemoryStream)data.BaseStream).ToArray();
	}
}
