@page "/noise/perlin/2d"
@using System.Globalization
@using System.Runtime.InteropServices.JavaScript
@using RandomExtensions
@using WebShowcase.Component

<PageTitle>Perlin Noise 2D</PageTitle>

<h1>Perlin Noise 2D</h1>

<main>
	<Section Title="Configuration">
		<h3>RNG</h3>
		<form id="rng-algorithm">
			<label for="rng-inputAlgorithm">Algorithm</label>
			<select id="rng-inputAlgorithm" disabled>
				<option selected>xoshiro128+</option>
				<option>xoshiro128++</option>
				<option>xoshiro128**</option>
				<option>xoshiro256+</option>
				<option>xoshiro256++</option>
				<option>xoshiro256**</option>
				<option>xoshiro512+</option>
				<option>xoshiro512++</option>
				<option>xoshiro512**</option>
				<option>xoshiro1024+</option>
				<option>xoshiro1024++</option>
				<option>xoshiro1024**</option>
			</select>
		</form>
		<form id="rng-seed">
			<label for="rng-inputSeed">Seed</label>
			<input id="rng-inputSeed" type="number" @bind="Seed" />
		</form>

		<hr />

		<h3>Perlin Noise</h3>
		<form id="perlinNoise-cellCount">
			<label for="perlinNoise-inputCellCount">Cell Count</label>
			<input  id="perlinNoise-inputCellCount" type="number" min="1" @bind="CellCount" />
			<label for="perlinNoise-inputCellCount">^2</label>
		</form>
		<form id="perlinNoise-wrap">
			<label for="perlinNoise-inputWrap">Wrap</label>
			<input  id="perlinNoise-inputWrap" type="checkbox" @bind="Wrap" />
		</form>

		<hr />

		<h3>Texture</h3>
		<form id="texture-size">
			<label for="texture-inputSize">Texture Size</label>
			<input  id="texture-inputSize" type="number" @bind="TextureSize" />
			<label for="texture-inputSize">px</label>
		</form>

		<button type="button" @onclick="QueueNoiseGenerationAsync">Generate</button>
	</Section>

	<Section Title="Result">
		<div>
			<canvas id="result-canvas" hidden=@(pixelData == null) />
			@if(isGenerating)
			{
				<svg class="progress" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
					<path d="M5.18,10.82A4,4,0,1,1,10.82,10.82" pathLength="100" stroke-dasharray="@(generationProgress * 100) 200" />
					<text x="8" y="8.5">@($"{(generationProgress * 100):F0}")%</text>
				</svg>
			}
			else
			{
				<svg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg">
					@if (!isGenerating && ShowGrid)
					{
						@for (float i = 1; i < CellCount; i++)
						{
							<line x1=@((i * 256 / CellCount).ToString(CultureInfo.InvariantCulture)) y1="0"
								  x2=@((i * 256 / CellCount).ToString(CultureInfo.InvariantCulture)) y2="256" />

							<line x1="0" y1=@((i * 256 / CellCount).ToString(CultureInfo.InvariantCulture))
								  x2="256" y2=@((i * 256 / CellCount).ToString(CultureInfo.InvariantCulture)) />
						}
						@if (ShowVectors)
						{
							@for (int y = 0; y < CellCount + 1; y++)
							{
								@for (int x = 0; x < CellCount + 1; x++)
								{
									<line class="arrow"
										  x1=@(((float)x * 256 / CellCount).ToString(CultureInfo.InvariantCulture))
										  y1=@(((float)y * 256 / CellCount).ToString(CultureInfo.InvariantCulture))
										  x2=@((((float)x + GradientMatrix[x, y, 0] * 0.75) * 256 / CellCount).ToString(CultureInfo.InvariantCulture))
										  y2=@((((float)y + GradientMatrix[x, y, 1] * 0.75) * 256 / CellCount).ToString(CultureInfo.InvariantCulture)) />
								}
							}
						}
					}
				</svg>
			}
		</div>
		@if (!isGenerating)
		{
			<hr />

			<h3>Overlay</h3>
			<form id="showGrid">
				<label for="input-showGrid">Show Grid</label>
				<input id="input-showGrid" type="checkbox" @bind="ShowGrid" />
			</form>
			<form id="showVectors">
				<label for="input-showVectors">Show Vectors</label>
				<input id="input-showVectors" type="checkbox" @bind="ShowVectors" disabled="@(!ShowGrid)" />
			</form>
		}
		
	</Section>
</main>

@code
{
	// RNG properties.
	//TODO: RNG selector.
	public int Seed { get; set; } = 420;

	// Perlin noise properties.
	public uint CellCount { get; set; } = 8;
	public bool Wrap { get; set; } = false;

	// Output properties.
	public int TextureSize { get; set; } = 128;

	// Visualizer properties.
	public byte[]? pixelData = null;
	private float[,,] GradientMatrix { get; set; } = new float[9, 9, 2];	//TODO: null
	public bool ShowGrid { get; set; } = false;
	public bool ShowVectors { get; set; } = false;

	// Generation task properties.
	private bool isGenerating = false;
	private float generationProgress = 0.0f;
	private CancellationTokenSource? generationTokenSource = null;

	protected override async Task OnInitializedAsync()
	{
		await JSHost.ImportAsync("PerlinNoise2D", "../Pages/PerlinNoise2D.razor.js");
		await QueueNoiseGenerationAsync();
	}

	private async Task QueueNoiseGenerationAsync()
	{
		pixelData = null;
		generationProgress = 0;
		isGenerating = true;
		StateHasChanged();

		// Request cancellation of a previuos generation task (if any).
		generationTokenSource?.Cancel();
		generationTokenSource?.Dispose();
		generationTokenSource = new CancellationTokenSource();

		Progress<float> progress = new Progress<float>((currentProgress) =>  generationProgress = currentProgress);

		await Task.Run(
			async () =>
			{
				await GenerateImage(progress, generationTokenSource.Token);
				GenerateVectors();
			},
			generationTokenSource.Token
		);
		isGenerating = false;
		StateHasChanged();
	}

	private async Task GenerateImage(IProgress<float> progress, CancellationToken cancellationToken)
	{
		// Generates texture data.
		PGAL.Noise.PerlinNoise2D noise = new(Seed, CellCount, Wrap);
		byte[] buffer = new byte[TextureSize * TextureSize * 4];
		for (int y = 0; y < TextureSize; y++)
		{
			cancellationToken.ThrowIfCancellationRequested();

			for (int x = 0; x < TextureSize; x++)
			{
				var sx = CellCount * (float)x / TextureSize;
				var sy = CellCount * (float)y / TextureSize;
				byte v = (byte)(noise.At(sx, sy) * 255);
				buffer[(x + y * TextureSize) * 4 + 0] = v;
				buffer[(x + y * TextureSize) * 4 + 1] = v;
				buffer[(x + y * TextureSize) * 4 + 2] = v;
				buffer[(x + y * TextureSize) * 4 + 3] = 255;
			}
			progress.Report((float)y / (float)TextureSize);
			await InvokeAsync(StateHasChanged);
			await Task.Yield();
		}
		pixelData = buffer;
		LoadImage("result-canvas", pixelData, TextureSize);
	}

	private void GenerateVectors()
	{
		GradientMatrix = new float[CellCount + 1, CellCount + 1, 2];
		//Random r = new(Seed);
		Splitmix64 seedGenerator = new((ulong)Seed);
		RandomXoshiro128Plus r = new(seedGenerator.Next(), seedGenerator.Next());
		for (int y = 0; y < (CellCount + 1); y++)
		{
			for (int x = 0; x < (CellCount + 1); x++)
			{
				float angle = r.NextSingle() * 2 * MathF.PI;
				(GradientMatrix[x, y, 0], GradientMatrix[x, y, 1]) = MathF.SinCos(angle);
			}
		}
		if (Wrap)
		{
			// Right Side = Left Side
			for (int y = 0; y <= CellCount; y++)
			{
				GradientMatrix[CellCount, y, 0] = GradientMatrix[0, y, 0];
				GradientMatrix[CellCount, y, 1] = GradientMatrix[0, y, 1];
			}
			// Bottom Side = Top Side
			for (int x = 0; x <= CellCount; x++)
			{
				GradientMatrix[x, CellCount, 0] = GradientMatrix[x, 0, 0];
				GradientMatrix[x, CellCount, 1] = GradientMatrix[x, 0, 1];
			}
		}
	}
}
