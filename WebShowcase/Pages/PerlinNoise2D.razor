@page "/noise/perlin/2d"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using System.Globalization
@using System.Runtime.InteropServices.JavaScript

<PageTitle>Perlin Noise 2D</PageTitle>

<h1>Perlin Noise 2D</h1>

<main>
	<section id="configuration">
		<h2>Configuration</h2>

		<h3>Perlin Noise</h3>
		<form id="seed">
			<label for="input-seed">Seed</label>
			<input  id="input-seed" type="number" @bind="Seed" />
		</form>
		<form id="cellCount">
			<label for="input-cellCount">Cell Count</label>
			<input  id="input-cellCount" type="number" @bind="CellCount" />
			<label for="input-cellCount">^2</label>
		</form>
		<form id="wrap">
			<label for="input-wrap">Wrap</label>
			<input  id="input-wrap" type="checkbox" @bind="Wrap" />
		</form>

		<hr />

		<h3>Texture</h3>
		<form id="textureSize">
			<label for="input-textureSize">Texture Size</label>
			<input  id="input-textureSize" type="number" @bind="TextureSize" />
			<label for="input-textureSize">px</label>
		</form>

		<button type="button" @onclick="GenerateTexture">Generate</button>
	</section>

	<section id="result">
		<h2>Result Image</h2>
			
		<div>
			<img id="texture" alt="generated noise" />
			<svg viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg">
				@if (ShowGrid)
				{
					@for (float i = 1; i < CellCount; i++)
					{
						<line x1=@((i * GridSize).ToString(CultureInfo.InvariantCulture))
								y1="0"
								x2=@((i * GridSize).ToString(CultureInfo.InvariantCulture))
								y2="256" />

						<line x1="0"
								y1=@((i * GridSize).ToString(CultureInfo.InvariantCulture))
								x2="256"
								y2=@((i * GridSize).ToString(CultureInfo.InvariantCulture)) />
					}
					@if (ShowVectors)
					{
						@for (int y = 0; y < CellCount+1; y++)
						{
							@for (int x = 0; x < CellCount+1; x++)
							{
								<line class="arrow"
										x1=@(((float)x * GridSize).ToString(CultureInfo.InvariantCulture))
										y1=@(((float)y * GridSize).ToString(CultureInfo.InvariantCulture))
										x2=@((((float)x + GradientMatrix[x, y, 0]*0.75)*GridSize).ToString(CultureInfo.InvariantCulture))
										y2=@((((float)y + GradientMatrix[x, y, 1]*0.75)*GridSize).ToString(CultureInfo.InvariantCulture)) />
							}
						}
					}
				}
			</svg>
		</div>
		
		<hr />

		<h3>Overlay</h3>
		<form id="showGrid">
			<label for="input-showGrid">Show Grid</label>
			<input  id="input-showGrid" type="checkbox" @bind="ShowGrid" />
		</form>
		<form id="showVectors">
			<label for="input-showVectors">Show Vectors</label>
			<input  id="input-showVectors" type="checkbox" @bind="ShowVectors" disabled="@(!ShowGrid)" />
		</form>
	</section>
</main>

@code
{
	public int Seed { get; set; } = 420;
	public int CellCount { get; set; } = 8;
	public bool Wrap { get; set; } = false;

	public int TextureSize { get; set; } = 128;

	public bool ShowGrid { get; set; } = false;
	public bool ShowVectors { get; set; } = false;

	//TODO: Valori di ritorno vaghi, indagare sul cosa ho fatto.
	private float GridSize => 256 / CellCount;
	private float[,,] GradientMatrix { get; set; } = new float[9, 9, 2];

	protected override async Task OnInitializedAsync()
	{
		await JSHost.ImportAsync("PerlinNoise2D", "../Pages/PerlinNoise2D.razor.js");
		GenerateTexture();
	}

	private void GenerateTexture()
	{
		PGAL.Noise.PerlinNoise2D noise = new(Seed, (uint) CellCount, Wrap);
		Rgba32[] textureData = new Rgba32[TextureSize * TextureSize];
		for (int y = 0; y < TextureSize; y++)
		{
			for (int x = 0; x < TextureSize; x++)
			{
				var sx = CellCount * (float)x / TextureSize;
				var sy = CellCount * (float)y / TextureSize;
				byte v = (byte)(noise.At(sx, sy) * 255);
				textureData[TextureSize * y + x] = new Rgba32(v, v, v);
			}
		}

		Image<Rgba32> a = Image<Rgba32>.LoadPixelData(new ReadOnlySpan<Rgba32>(textureData), TextureSize, TextureSize);
		MemoryStream ms = new();
		a.SaveAsPng(ms);
		byte[] pngBuffer = ms.ToArray();
		LoadImage(pngBuffer);
		GenerateVectors();
	}

	private void GenerateVectors()
	{
		GradientMatrix = new float[CellCount + 1, CellCount + 1, 2];
		Random r = new(Seed);
		for (int y = 0; y < (CellCount + 1); y++)
		{
			for (int x = 0; x < (CellCount + 1); x++)
			{
				float angle = r.NextSingle() * 2 * MathF.PI;
				(GradientMatrix[x, y, 0], GradientMatrix[x, y, 1]) = MathF.SinCos(angle);
			}
		}
		if (Wrap)
		{
			// Right Side = Left Side
			for (int y = 0; y <= CellCount; y++)
			{
				GradientMatrix[CellCount, y, 0] = GradientMatrix[0, y, 0];
				GradientMatrix[CellCount, y, 1] = GradientMatrix[0, y, 1];
			}
			// Bottom Side = Top Side
			for (int x = 0; x <= CellCount; x++)
			{
				GradientMatrix[x, CellCount, 0] = GradientMatrix[x, 0, 0];
				GradientMatrix[x, CellCount, 1] = GradientMatrix[x, 0, 1];
			}
		}
	}
}
