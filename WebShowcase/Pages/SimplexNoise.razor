@page "/noise/simplex"
@using System.Runtime.InteropServices.JavaScript
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using System.Globalization

<PageTitle>Simplex Noise</PageTitle>

<h1>Simplex Noise</h1>

<main>
	<section id="configuration">
		<h2>Configuration:</h2>

		<h3>Simplex Noise</h3>

		<form>
			<label for="seed">Seed</label>
			<input type="number" id="seed" @bind="Seed" />
		</form>

		<hr />

		<h3>Texture</h3>

		<form>
			<label for="texture_size">Texture Size</label>
			<input type="number" id="texture_size" @bind="TextureSize" />
			<label for="texture_size">px</label>
		</form>
		
		<button type="button" @onclick="GenerateTexture">Generate</button>
	</section>

	<section id="result">
		<h2>Result Image:</h2>
		<img id="texture" alt="generated noise" />
	</section>
</main>

@code
{
	public int Seed { get; set; } = 420;

	public int TextureSize { get; set; } = 128;

	protected override async Task OnInitializedAsync()
	{
		await JSHost.ImportAsync("SimplexNoise", "../Pages/SimplexNoise.razor.js");
		GenerateTexture();
	}

	private void GenerateTexture()
	{
		PGAL.Noise.SimplexNoiseF noise = new(Seed);
		Rgba32[] textureData = new Rgba32[TextureSize * TextureSize];
		for (int y = 0; y < TextureSize; y++)
		{
			for (int x = 0; x < TextureSize; x++)
			{
				var sx = 8 * (float)x / TextureSize;
				var sy = 8 * (float)y / TextureSize;
				byte v = (byte)((noise.At(sx, sy) * 0.5 + 0.5) * 255);
				textureData[TextureSize * y + x] = new Rgba32(v, v, v);
			}
		}

		Image<Rgba32> a = Image<Rgba32>.LoadPixelData(new ReadOnlySpan<Rgba32>(textureData), TextureSize, TextureSize);
		MemoryStream ms = new();
		a.SaveAsPng(ms);
		byte[] pngBuffer = ms.ToArray();
		LoadImage(pngBuffer);
	}
}
