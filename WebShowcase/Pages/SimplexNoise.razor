@page "/noise/simplex"
@using System.Globalization
@using System.Runtime.InteropServices.JavaScript
@using WebShowcase.Component

<PageTitle>Simplex Noise</PageTitle>

<h1>Simplex Noise 2D</h1>

<main>
	<Section Title="Configuration">
		<h3>RNG</h3>
		<form id="rng-algorithm">
			<label for="rng-inputAlgorithm">Algorithm</label>
			<select id="rng-inputAlgorithm" disabled>
				<option selected>xoshiro128+</option>
				<option>xoshiro128++</option>
				<option>xoshiro128**</option>
				<option>xoshiro256+</option>
				<option>xoshiro256++</option>
				<option>xoshiro256**</option>
				<option>xoshiro512+</option>
				<option>xoshiro512++</option>
				<option>xoshiro512**</option>
				<option>xoshiro1024+</option>
				<option>xoshiro1024++</option>
				<option>xoshiro1024**</option>
			</select>
		</form>
		<form id="rng-seed">
			<label for="rng-inputSeed">Seed</label>
			<input id="rng-inputSeed" type="number" @bind="Seed" />
		</form>

		<hr />

		<h3>Texture</h3>
		<form id="texture-size">
			<label for="texture-inputSize">Texture Size</label>
			<input id="texture-inputSize" type="number" @bind="TextureSize" />
			<label for="texture-inputSize">px</label>
		</form>
		
		<button type="button" @onclick="QueueNoiseGenerationAsync">Generate</button>
	</Section>

	<Section Title="Result">
		<div>
			<canvas id="result-canvas" hidden=@(pixelData == null) />
			@if (isGenerating)
			{
				<svg class="progress" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
					<path d="M5.18,10.82A4,4,0,1,1,10.82,10.82" pathLength="100" stroke-dasharray="@(generationProgress * 100) 200" />
					<text x="8" y="8.5">@($"{(generationProgress * 100):F0}")%</text>
				</svg>
			}
		</div>
	</Section>
</main>

@code
{
	// RNG properties.
	//TODO: RNG selector.
	public int Seed { get; set; } = 420;

	// Output properties.
	public int TextureSize { get; set; } = 128;

	// Visualizer properties.
	public byte[]? pixelData = null;

	// Generation task properties.
	private bool isGenerating = false;
	private float generationProgress = 0.0f;
	private CancellationTokenSource? generationTokenSource = null;


	protected override async Task OnInitializedAsync()
	{
		await JSHost.ImportAsync("SimplexNoise", "../Pages/SimplexNoise.razor.js");
		await QueueNoiseGenerationAsync();
	}

	private async Task QueueNoiseGenerationAsync()
	{
		pixelData = null;
		generationProgress = 0;
		isGenerating = true;
		StateHasChanged();

		// Request cancellation of a previous generation task (if any).
		generationTokenSource?.Cancel();
		generationTokenSource?.Dispose();
		generationTokenSource = new CancellationTokenSource();

		Progress<float> progress = new Progress<float>((currentProgress) => generationProgress = currentProgress);

		await Task.Run(
			async () =>
			{
				await GenerateImage(progress, generationTokenSource.Token);
			}
		);
		isGenerating = false;
		StateHasChanged();
	}

	private async Task GenerateImage(IProgress<float> progress, CancellationToken cancellationToken)
	{
		// Generates texture data.
		PGAL.Noise.SimplexNoiseF noise = new(Seed);
		byte[] buffer = new byte[TextureSize * TextureSize * 4];
		for (int y = 0; y < TextureSize; y++)
		{
			cancellationToken.ThrowIfCancellationRequested();

			for (int x = 0; x < TextureSize; x++)
			{
				//TODO: Check this stuff for possible dynamic resize.
				var sx = 8 * (float)x / TextureSize;
				var sy = 8 * (float)y / TextureSize;
				byte v = (byte)((noise.At(sx, sy) * 0.5 + 0.5) * 255);
				buffer[(x + y * TextureSize) * 4 + 0] = v;
				buffer[(x + y * TextureSize) * 4 + 1] = v;
				buffer[(x + y * TextureSize) * 4 + 2] = v;
				buffer[(x + y * TextureSize) * 4 + 3] = 255;
			}
			progress.Report((float)y / (float)TextureSize);
			await InvokeAsync(StateHasChanged);
			await Task.Yield();
		}
		pixelData = buffer;
		LoadImage("result-canvas", pixelData, TextureSize);
	}
}
