@page "/noise/perlin/3d"
@using System.Runtime.InteropServices.JavaScript
@using System.Globalization
@using WebShowcase.Component

@inject IJSRuntime JSRuntime

<PageTitle>Perlin Noise 3D</PageTitle>

<h1>Perlin Noise 3D</h1>

<main>
	<Section Title="Configuration">
		<h3>Perlin Noise</h3>
		<form id="seed">
			<label for="input-seed">Seed</label>
			<input  id="input-seed" type="number" @bind="Seed" />
		</form>
		<form id="cellCount">
			<label for="input-cellCount">Cell Count</label>
			<input  id="input-cellCount" type="number" @bind="CellCount" />
		</form>
		<form id="wrap">
			<label for="input-wrap">Wrap</label>
			<input  id="input-wrap" type="checkbox" @bind="Wrap" />
		</form>

		<hr />

		<h3>Texture</h3>
		<form>
			<label for="input-textureSize">Texture Size</label>
			<input  id="input-textureSize" type="number" @bind="TextureSize" />
			<label for="input-textureSize">px</label>
		</form>

	</Section>

	<Section Title="Result">
		<canvas id="viewport" width="720" height="720"></canvas>

		<hr/>

		<h3>Animation controls</h3>
		<form>
			<label for="input-threshold">Threshold: @($"{Threshold:F02}")</label>
			<input type="range" id="input-threshold" min="0" max="1" step="0.01" @bind="Threshold" @bind:event="oninput" />
			<button type="button" @onclick=GenerateModel>Generate</button>
		</form>
	</Section>
</main>

@code
{
	public int Seed { get; set; } = 420;
	public int CellCount { get; set; } = 8;
	public bool Wrap { get; set; } = false;

	public int TextureSize { get; set; } = 16;

	public float Threshold { get; set; } = 0.55f;

	protected override async Task OnInitializedAsync()
	{
		await JSHost.ImportAsync("PerlinNoise3D", "../Pages/PerlinNoise3D.razor.js");
		await StartRenderer();
		GenerateModel();
	}

	private void GenerateModel()
	{
		PGAL.Noise.PerlinNoise3D noise = new(Seed, (uint) CellCount, Wrap);
		
		float[,,] lattice = new float[TextureSize, TextureSize, TextureSize];
		
		for (int z = 0; z < TextureSize; z++)
		for (int y = 0; y < TextureSize; y++)
		for (int x = 0; x < TextureSize; x++)
		{
			var sx = CellCount * (float)x / TextureSize;
			var sy = CellCount * (float)y / TextureSize;
			var sz = CellCount * (float)z / TextureSize;
		
			lattice[x, y, z] = noise.At(sx, sy, sz);
		
			if (x == 0 || y == 0 || z == 0 || x == (TextureSize - 1) || y == (TextureSize - 1) || z == (TextureSize - 1))
			{
				lattice[x, y, z] = 0;
			}
		}

		var vertexBufferData = MarchingCubes.GenerateMesh(lattice, TextureSize-1, Threshold);
		
		// JS interop function. Changes the currend vertex buffer in VRAM an its reference for WebGPU.
		LoadVertexBuffer(vertexBufferData);
	}
}
