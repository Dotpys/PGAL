@page "/noise/perlin/3d"
@using System.Runtime.InteropServices.JavaScript
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using System.Globalization

<PageTitle>Perlin Noise 3D</PageTitle>

<h1>Perlin Noise 3D</h1>

<main>
	<section id="configuration">
		<h2>Configuration</h2>

		<h3>Perlin Noise</h3>
		<form id="seed">
			<label for="input-seed">Seed</label>
			<input  id="input-seed" type="number" @bind="Seed" />
		</form>
		<form id="cellCount">
			<label for="input-cellCount">Cell Count</label>
			<input  id="input-cellCount" type="number" @bind="CellCount" />
		</form>
		<form id="wrap">
			<label for="input-wrap">Wrap</label>
			<input  id="input-wrap" type="checkbox" @bind="Wrap" />
		</form>

		<hr />

		<h3>Texture</h3>
		<form>
			<label for="input-textureSize">Texture Size</label>
			<input  id="input-textureSize" type="number" @bind="TextureSize" />
			<label for="input-textureSize">px</label>
		</form>

		<button type="button" @onclick="GenerateTexture">Generate</button>
	</section>

	<section id="result">
		<h2>Result</h2>
		
		<img id="texture" alt="generated noise" src=@(frameUrls[FrameZ]) />

		<hr/>

		<h3>Animation controls</h3>
		<form id="frameZ">
			<label for="input-frameZ" style="width: @(7 + (TextureSize-1).ToString().Length)ch">Frame: @(FrameZ)</label>
			<input  id="input-frameZ" type="range"  min="0" max="@(TextureSize-1)" @bind="FrameZ" @bind:event="oninput" />
			<button type="button" @onclick=@(() => { Animated = !Animated; })>@(Animated ? "Stop" : "Play")</button>
		</form>
	</section>
</main>

@code
{
	public int Seed { get; set; } = 420;
	public int CellCount { get; set; } = 8;
	public bool Wrap { get; set; } = false;

	public int TextureSize { get; set; } = 64;

	public uint FrameZ { get; set; } = 0;
	public bool Animated { get; set; } = false;

	private string[] frameUrls = new string[64];
	private Timer? timer;

	protected override async Task OnInitializedAsync()
	{
		await JSHost.ImportAsync("PerlinNoise3D", "../Pages/PerlinNoise3D.razor.js");
		GenerateTexture();
		timer = new Timer(Animate, null, 0, 100);
	}

	private void Animate(object? o)
	{
		if (Animated)
		{
			FrameZ = (uint)((FrameZ + 1) % TextureSize);
			StateHasChanged();
		}
	}

	private void GenerateTexture()
	{
		frameUrls = new string[TextureSize];

		PGAL.Noise.PerlinNoise3D noise = new(Seed, (uint) CellCount, Wrap);

		for (int z = 0; z < TextureSize; z++)
		{
			Rgba32[] textureData = new Rgba32[TextureSize * TextureSize];
			for (int y = 0; y < TextureSize; y++)
			{
				for (int x = 0; x < TextureSize; x++)
				{
					var sx = CellCount * (float)x / TextureSize;
					var sy = CellCount * (float)y / TextureSize;
					var sz = CellCount * (float)z / TextureSize;
					byte v = (byte)(noise.At(sx, sy, sz) * 255);
					textureData[TextureSize * y + x] = new Rgba32(v, v, v);
				}
			}

			Image<Rgba32> a = Image<Rgba32>.LoadPixelData(new ReadOnlySpan<Rgba32>(textureData), TextureSize, TextureSize);
			MemoryStream ms = new();
			a.SaveAsPng(ms);
			byte[] pngBuffer = ms.ToArray();

			frameUrls[z] = LoadFrame(pngBuffer);
		}
	}
}
